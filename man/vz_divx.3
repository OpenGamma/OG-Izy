.TH vz_divx 3  "20 Mar 2013" "version 0.1"
.SH NAME
vz_divx - vectorised version of the operation, out0 := arg0 / (constant) arg1, for complex arguments.
.SH SYNOPSIS
.B #include <libizy/izy.h>
.sp
.BI "void vz_divx(const int * "count
.BI ", const complex double * "arg0
.BI ", const int * "offsetarg0
.BI ", const complex double * "arg1
.BI ", const int * "offsetarg1
.BI ", double "out0
.BI ", const int * "offsetout0
.B ");"


Link with \fI\-lizy\fP.
.SH DESCRIPTION
The 
.BR vz_divx ()
function provides a vectorised version of the operation 
.B out0 := arg0 / (constant) arg1
for complex arguments.

.HP
.B Input:

.B "const int * count"
is the number of elements to process

.B "const complex double * arg0"
is the first operand

.B "const int * offsetarg0"
is the offset into arg0 at which values should be taken

.B "const complex double * arg1"
is the second operand, a constant

.B "const int * offsetarg1"
is the offset into arg1 at which values should be taken

.B "const int * offsetout0"
is the offset into out0 at which values should be placed

.HP
.BR Output:

.B "double * out0"
contains the result of performing element wise arg0 / (constant) arg1

.PP
.SH EXAMPLE
.nf
/* Link with "\-lizy \-lm" */
#include <libizy/izy.h>
#include <stdio.h>
#include <complex.h>
#include <math.h>
int main()
{
  int i;
  int n = 4;
  static complex double in_data0[] = {0.1 + 0.2*I, 0.2+0.3*I, 0.3+0.4*I, 0.4+0.5*I };
  static complex double in_data1[] = {0.2 + 0.3*I};
  complex double results_data[n];

  const int offsetin0 = 0;
  const int offsetin1 = 0;  
  const int offsetout0 = 0;
  const int count = n;

  /* make izy call */
  vz_divx(&count, in_data0, &offsetin0, in_data1, &offsetin1, results_data, &offsetout0);

  /* check */
  printf("vz_divx():\\n");
  printf(" Input 0          |Input 1           |Output            |Calling in_data0[i] / in_data1[0] \\n");
  for(i=0; i<n; i++)
    {
      printf("%6.3f+%6.3fi   %6.3f+%6.3fi     %6.3f+%6.3fi     %6.3f+%6.3fi\\n", creal(in_data0[i]), cimag(in_data0[i]), creal(in_data1[0]), cimag(in_data1[0]), creal(results_data[i]), cimag(results_data[i]), creal(in_data0[i] / in_data1[0]), cimag(in_data0[i] / in_data1[0]));
    }   
}
.fi
.SH AUTHOR
Stuart Archibald (stuart (at) opengamma.com)
.SH "SEE ALSO"
.B vz_addx(3), vz_mulx(3), vz_subx(3), vd_divx(3)
