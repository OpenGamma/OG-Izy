.\" %%%LICENSE_START(APACHE_V2)
.\"
.\" Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
.\"
.\" Please see distribution for license.
.\"
.\" %%%LICENSE_END

.TH vd_modf 3  "15 Jul 2014" "version 0.1"
.SH NAME
vd_modf - vectorised version of the operation, [out0, out1] := modf(arg0).
.SH SYNOPSIS
.B #include <libizy/izy.h>
.sp
.BI "void vd_modf(const int * "count
.BI ", const double * "arg0
.BI ", const int * "offsetarg0
.BI ", double * "out0
.BI ", const int * "offsetout0
.BI ", double * "out1
.BI ", const int * "offsetout1
.B ");"


Link with e.g. \fI\-lizy_std\fP.
.SH DESCRIPTION
The 
.BR vd_modf ()
function provides a vectorised version of the operation 
.B [out0, out1] := modf(arg0)
based on a vectorised call to
.B modf(3), [out1]:=modf(arg0, out0)

.HP
.B Input:

.B "const int * count"
is the number of elements to process

.B "const double * arg0"
is the first operand

.B "const int * offsetarg0"
is the offset into arg0 at which values should be taken

.B "const int * offsetout0"
is the offset into out0 at which values should be placed

.B "const int * offsetout1"
is the offset into out1 at which values should be taken

.HP
.BR Output:

.B "double * out0"
contains part of the result of performing element wise [out1]:=modf(arg0, out0)

.B "double * out1"
contains part of the result of performing element wise [out1]:=modf(arg0, out0)

.PP
.SH EXAMPLE
.nf
/* Link with e.g. "\-lizy_std \-lm" */
#include <libizy/izy.h>
#include <stdio.h>
#include <complex.h>
#include <math.h>
int main()
{
  int i;
  int n = 4;
  static double in_data0[] = {1.1, 2.2, 3.3, 4.4 };
  double results_data0[n];
  double results_data1[n];
  double tmp0, tmp1;

  const int offsetin0 = 0;
  const int offsetout0 = 0;
  const int offsetout1 = 0;
  const int count = n;

  /* make izy call */
  vd_modf(&count, in_data0, &offsetin0, results_data0, &offsetout0, results_data1, &offsetout1);

  /* check */
  printf("vd_modf():\\n");
  printf(" Input 0 | Output0 | Output1 | Calling [out1]:=modf(arg0, out0) \\n");
  for(i=0; i<n; i++)
    {
      tmp1 = modf(in_data0[i], &tmp0);
      printf("%6.3f    %6.3f    %6.3f    %6.3f   %6.3f\\n", in_data0[i], results_data0[i], results_data1[i], tmp0, tmp1);
    }
}
.fi
.SH AUTHOR
OpenGamma Inc. and the OpenGamma group of companies.
.SH "SEE ALSO"
.B modf(3), vd_trunc(3)
